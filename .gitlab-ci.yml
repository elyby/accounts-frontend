variables:
  # To cache both npm modules and Cypress binary we use environment variables
  # to point at the folders we can list as paths in "cache" job settings
  YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/yarn"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/cypress"

default:
  image: circleci/node:12-buster-browsers

stages:
  - prepare
  - test
  - build
  - deploy

# GitLab don't support bash syntax in the "variables" definitions,
# so we use a custom step to define all necessary environment variables
.defineVars: &defineVars |-
  export VERSION="${CI_COMMIT_TAG:-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}}"

.installSentry: &installSentry |-
  curl -sL https://sentry.io/get-cli/ | bash

.setupSSH: &setupSSH |-
  eval $(ssh-agent -s)
  echo "$SSH_DEPLOY_KEY" | tr -d '\r' | ssh-add -

###################
# Steps to extend #
###################

.yarnCache:
  cache:
    key: yarn-cache
    paths:
      - cache/cypress
      - node_modules
      - packages/*/node_modules
      - tests-e2e/node_modules
    policy: pull

#################
# Prepare stage #
#################

Yarn:
  stage: prepare
  extends:
    - .yarnCache
  cache:
    policy: pull-push
  script:
    - yarn install --frozen-lockfile --cache-folder ~/.cache/yarn

#################
# Testing stage #
#################

Lint:
  stage: test
  extends:
    - .yarnCache
  script:
    - yarn lint:check

TypeScript:
  stage: test
  extends:
    - .yarnCache
  script:
    - yarn ts:check

Jest:
  stage: test
  extends:
    - .yarnCache
  script:
    - yarn test

Cypress:
  stage: test
  extends:
    - .yarnCache
  variables:
    # Sentry's DSN is provided for build step from repository configuration,
    # but it's not necessary to send any logs reports during E2E testing
    SENTRY_DSN: ""
  script:
    - yarn start &
    - yarn wait-on http://localhost:8080
    - >
      yarn --cwd tests-e2e test:ci
      --record
      --browser chrome
      --parallel
  parallel: 4
  timeout: 5m
  allow_failure: true
  only:
    refs:
      - master

###############
# Build stage #
###############

Build:
  stage: build
  needs:
    - Lint
    - TypeScript
    - Jest
  extends:
    - .yarnCache
  before_script:
    - *defineVars
    - sudo apt install cpio
  script:
    - yarn build
    # Removing unneeded files
    - rm -rf build/messages
    - rm -rf build/*.css.map
    # Move all source maps to it's own directory
    - mkdir -p source-maps
    - cd build
    - find . -name '*.js.map' | cpio -pdm ../source-maps/
    - rm -rf *.js.map
    - find . -name '*.js' | cpio -pdm ../source-maps/
    - cd ..
  artifacts:
    name: "Production build for $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"
    paths:
      - build
      - source-maps
    expire_in: 1 week

################
# Deploy stage #
################

Deploy dev:
  stage: deploy
  before_script:
    - *defineVars
    - *installSentry
    - *setupSSH
    - sudo apt install rsync
  script:
    # Notify Sentry about release
    - sentry-cli releases new $VERSION
    - sentry-cli releases set-commits --commit "elyby/accounts-frontend@$CI_COMMIT_SHA" $VERSION
    - sentry-cli releases files $VERSION upload-sourcemaps source-maps
    # Deploy the build
    - >
      rsync -v -a -r --delete-after -e 'ssh -J deploy@ely.by:4534 -p 722 -o StrictHostKeyChecking=no'
      build/
      root@playground.ely.local:/srv/dev.account.ely.by/frontend
    # Notify Sentry about deployment and finalize release
    - sentry-cli releases deploys $VERSION new -e "Development"
    - sentry-cli releases finalize $VERSION
